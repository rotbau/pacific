RAW provider 2020/12/09 17:00:20 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:00:20 Finished
RAW provider 2020/12/09 17:00:21 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:00:21 Finished
RAW provider 2020/12/09 17:00:21 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:00:21 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/09 17:00:25 Finished
RAW provider 2020/12/09 17:14:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:14:52 Finished
RAW provider 2020/12/09 17:14:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:14:53 Finished
RAW provider 2020/12/09 17:14:53 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:14:53 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/09 17:14:53 Finished
RAW provider 2020/12/09 17:15:03 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:15:03 Finished
RAW provider 2020/12/09 17:15:03 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:15:04 Finished
RAW provider 2020/12/09 17:15:04 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:15:04 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/09 17:15:26 Finished
RAW provider 2020/12/09 17:16:57 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:16:58 Finished
RAW provider 2020/12/09 17:16:58 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:16:58 Finished
RAW provider 2020/12/09 17:16:58 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:16:58 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/09 17:17:24 Finished
RAW provider 2020/12/09 17:17:33 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:17:33 Finished
RAW provider 2020/12/09 17:17:33 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:17:33 Finished
RAW provider 2020/12/09 17:17:33 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:17:33 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/09 17:17:34 Finished
RAW provider 2020/12/09 17:19:10 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:19:10 Finished
RAW provider 2020/12/09 17:19:10 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:19:11 Finished
RAW provider 2020/12/09 17:19:11 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:19:11 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/09 17:19:13 Finished
RAW provider 2020/12/09 17:19:20 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:19:20 Finished
RAW provider 2020/12/09 17:19:20 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:19:20 Finished
RAW provider 2020/12/09 17:19:20 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:19:21 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/09 17:19:25 Finished
RAW provider 2020/12/09 17:19:31 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:19:32 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/09 17:19:33 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=11) "fullVersion": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=1) {
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      },
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local"
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc0003afd70)(1)
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=5) "count": (*big.Float)(0xc0003afec0)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc0004699e0)(1)
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc000469aa0)(1)
     }
    },
    (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
     (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      },
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      }
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2020/12/09 17:19:33 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2020/12/09 17:19:33 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2020/12/09 17:19:35 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc0003f4018)({
 Object: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
  (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
  (string) (len=8) "metadata": (map[string]interface {}) (len=8) {
   (string) (len=9) "namespace": (string) (len=5) "app01",
   (string) (len=15) "resourceVersion": (string) (len=6) "246964",
   (string) (len=8) "selfLink": (string) (len=92) "/apis/run.tanzu.vmware.com/v1alpha1/namespaces/app01/tanzukubernetesclusters/tf-tkg-cluster1",
   (string) (len=3) "uid": (string) (len=36) "d89c257b-dc8f-42de-91df-3158a5318a24",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2020-12-09T23:30:19Z",
   (string) (len=10) "generation": (int64) 1,
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=1) {
      (string) (len=6) "f:spec": (map[string]interface {}) (len=3) {
       (string) (len=14) "f:distribution": (map[string]interface {}) (len=2) {
        (string) (len=13) "f:fullVersion": (map[string]interface {}) {
        },
        (string) (len=9) "f:version": (map[string]interface {}) {
        }
       },
       (string) (len=10) "f:settings": (map[string]interface {}) (len=1) {
        (string) (len=9) "f:network": (map[string]interface {}) (len=4) {
         (string) (len=5) "f:cni": (map[string]interface {}) (len=1) {
          (string) (len=6) "f:name": (map[string]interface {}) {
          }
         },
         (string) (len=6) "f:pods": (map[string]interface {}) (len=1) {
          (string) (len=12) "f:cidrBlocks": (map[string]interface {}) {
          }
         },
         (string) (len=15) "f:serviceDomain": (map[string]interface {}) {
         },
         (string) (len=10) "f:services": (map[string]interface {}) (len=1) {
          (string) (len=12) "f:cidrBlocks": (map[string]interface {}) {
          }
         }
        }
       },
       (string) (len=10) "f:topology": (map[string]interface {}) (len=2) {
        (string) (len=14) "f:controlPlane": (map[string]interface {}) (len=3) {
         (string) (len=7) "f:class": (map[string]interface {}) {
         },
         (string) (len=7) "f:count": (map[string]interface {}) {
         },
         (string) (len=14) "f:storageClass": (map[string]interface {}) {
         }
        },
        (string) (len=9) "f:workers": (map[string]interface {}) (len=3) {
         (string) (len=7) "f:class": (map[string]interface {}) {
         },
         (string) (len=7) "f:count": (map[string]interface {}) {
         },
         (string) (len=14) "f:storageClass": (map[string]interface {}) {
         }
        }
       }
      }
     },
     (string) (len=7) "manager": (string) (len=9) "Terraform",
     (string) (len=9) "operation": (string) (len=5) "Apply",
     (string) (len=4) "time": (string) (len=20) "2020-12-09T23:30:19Z",
     (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1"
    }
   },
   (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=3) {
   (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
    (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
    (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
   },
   (string) (len=8) "settings": (map[string]interface {}) (len=1) {
    (string) (len=7) "network": (map[string]interface {}) (len=4) {
     (string) (len=3) "cni": (map[string]interface {}) (len=1) {
      (string) (len=4) "name": (string) (len=6) "antrea"
     },
     (string) (len=4) "pods": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=12) "193.0.2.0/16"
      }
     },
     (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
     (string) (len=8) "services": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=15) "195.51.100.0/12"
      }
     }
    }
   },
   (string) (len=8) "topology": (map[string]interface {}) (len=2) {
    (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
     (string) (len=5) "count": (int64) 1
    },
    (string) (len=7) "workers": (map[string]interface {}) (len=3) {
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
     (string) (len=5) "count": (int64) 1,
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
    }
   }
  }
 }
})

RAW provider 2020/12/09 17:19:35 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=9) "namespace": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=8) "topology": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=12) "controlPlane": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=3) {
             (string) (len=5) "class": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=5) "count": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 78
              }
             },
             (string) (len=12) "storageClass": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=7) "workers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=3) {
             (string) (len=5) "count": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 78
              }
             },
             (string) (len=12) "storageClass": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=5) "class": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=12) "distribution": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "fullVersion": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=7) "version": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=8) "settings": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "network": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=4) {
             (string) (len=8) "services": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=10) "cidrBlocks": (cty.Type) {
                 typeImpl: (cty.typeTuple) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  ElemTypes: ([]cty.Type) (len=1 cap=1) {
                   (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             },
             (string) (len=3) "cni": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=4) "name": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=4) "pods": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=10) "cidrBlocks": (cty.Type) {
                 typeImpl: (cty.typeTuple) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  ElemTypes: ([]cty.Type) (len=1 cap=1) {
                   (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             },
             (string) (len=13) "serviceDomain": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
  (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=9) "namespace": (string) (len=5) "app01",
   (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=3) {
   (string) (len=8) "topology": (map[string]interface {}) (len=2) {
    (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
     (string) (len=5) "count": (*big.Float)(0xc000515140)(1)
    },
    (string) (len=7) "workers": (map[string]interface {}) (len=3) {
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
     (string) (len=5) "count": (*big.Float)(0xc0005152c0)(1)
    }
   },
   (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
    (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
    (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
   },
   (string) (len=8) "settings": (map[string]interface {}) (len=1) {
    (string) (len=7) "network": (map[string]interface {}) (len=4) {
     (string) (len=8) "services": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=15) "195.51.100.0/12"
      }
     },
     (string) (len=3) "cni": (map[string]interface {}) (len=1) {
      (string) (len=4) "name": (string) (len=6) "antrea"
     },
     (string) (len=4) "pods": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=12) "193.0.2.0/16"
      }
     },
     (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local"
    }
   }
  }
 }
}

RAW provider 2020/12/09 17:19:35 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             },
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=11) "fullVersion": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=1) {
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      },
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      }
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc0003afd70)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc0003afec0)(1)
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
     (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      },
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local"
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc000515140)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc0005152c0)(1)
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   }
  }
 }
}
RAW provider 2020/12/09 17:19:35 Finished
RAW provider 2020/12/09 17:45:13 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/09 17:45:13 Finished
RAW provider 2020/12/10 12:52:12 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:52:12 Finished
RAW provider 2020/12/10 12:52:12 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:52:12 Finished
RAW provider 2020/12/10 12:52:12 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:52:12 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.131:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x7a, 0x43, 0x43, 0x41, 0x62, 0x4f, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4f, 0x54, 0x49, 0x7a, 0x4d, 0x6a, 0x59, 0x78, 0x4d, 0x56, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x77, 0x4d, 0x54, 0x49, 0x77, 0x4e, 0x7a, 0x49, 0x7a, 0x4d, 0x7a, 0x45, 0x78, 0x4d, 0x56, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4c, 0x4b, 0x34, 0xa, 0x5a, 0x7a, 0x58, 0x77, 0x71, 0x62, 0x2f, 0x77, 0x6a, 0x31, 0x46, 0x36, 0x59, 0x63, 0x4c, 0x64, 0x37, 0x42, 0x2b, 0x38, 0x43, 0x75, 0x6d, 0x31, 0x6d, 0x61, 0x54, 0x70, 0x45, 0x75, 0x6e, 0x66, 0x4c, 0x71, 0x6f, 0x6a, 0x4c, 0x51, 0x45, 0x75, 0x4e, 0x34, 0x41, 0x6f, 0x67, 0x4e, 0x4a, 0x31, 0x4c, 0x2b, 0x6e, 0x47, 0x37, 0x69, 0x52, 0x78, 0x64, 0x59, 0x6e, 0x41, 0x4f, 0x59, 0x5a, 0x53, 0xa, 0x2b, 0x76, 0x7a, 0x56, 0x78, 0x32, 0x2f, 0x47, 0x70, 0x41, 0x41, 0x33, 0x33, 0x68, 0x59, 0x70, 0x45, 0x78, 0x4e, 0x5a, 0x73, 0x36, 0x6e, 0x61, 0x50, 0x79, 0x74, 0x64, 0x42, 0x65, 0x6e, 0x43, 0x30, 0x36, 0x57, 0x34, 0x70, 0x6e, 0x61, 0x43, 0x34, 0x4d, 0x59, 0x68, 0x75, 0x72, 0x6b, 0x78, 0x75, 0x77, 0x67, 0x48, 0x46, 0x48, 0x4d, 0x66, 0x52, 0x6a, 0x67, 0x74, 0x6a, 0x6e, 0x57, 0x68, 0xa, 0x37, 0x2b, 0x4d, 0x7a, 0x32, 0x42, 0x6f, 0x78, 0x37, 0x77, 0x73, 0x67, 0x57, 0x33, 0x4c, 0x68, 0x33, 0x66, 0x52, 0x71, 0x68, 0x2b, 0x75, 0x56, 0x4d, 0x76, 0x6d, 0x78, 0x51, 0x35, 0x34, 0x4b, 0x79, 0x65, 0x44, 0x32, 0x59, 0x6c, 0x54, 0x4f, 0x49, 0x70, 0x42, 0x47, 0x55, 0x51, 0x6a, 0x70, 0x7a, 0x56, 0x43, 0x4e, 0x43, 0x37, 0x34, 0x50, 0x61, 0x63, 0x4f, 0x2b, 0x4c, 0x2b, 0x6f, 0x55, 0xa, 0x44, 0x58, 0x38, 0x32, 0x43, 0x52, 0x50, 0x69, 0x66, 0x6b, 0x7a, 0x79, 0x73, 0x33, 0x6e, 0x34, 0x6a, 0x4b, 0x71, 0x47, 0x59, 0x68, 0x30, 0x69, 0x62, 0x67, 0x76, 0x53, 0x2f, 0x4b, 0x48, 0x75, 0x58, 0x6c, 0x78, 0x51, 0x53, 0x6e, 0x4c, 0x2f, 0x65, 0x6e, 0x54, 0x71, 0x57, 0x68, 0x74, 0x4d, 0x39, 0x49, 0x4c, 0x55, 0x59, 0x6f, 0x35, 0x79, 0x54, 0x6e, 0x31, 0x67, 0x46, 0x77, 0x51, 0x4a, 0xa, 0x46, 0x46, 0x61, 0x4f, 0x4c, 0x4f, 0x50, 0x63, 0x62, 0x30, 0x6f, 0x73, 0x44, 0x6b, 0x33, 0x49, 0x4d, 0x75, 0x38, 0x49, 0x6a, 0x77, 0x38, 0x52, 0x75, 0x4d, 0x33, 0x77, 0x77, 0x58, 0x44, 0x6a, 0x36, 0x39, 0x7a, 0x36, 0x6e, 0x47, 0x6e, 0x79, 0x38, 0x4e, 0x6b, 0x54, 0x30, 0x75, 0x66, 0x47, 0x4c, 0x54, 0x58, 0x70, 0x50, 0x42, 0x78, 0x45, 0x33, 0x56, 0x59, 0x39, 0x6f, 0x46, 0x69, 0x76, 0xa, 0x79, 0x70, 0x4d, 0x59, 0x74, 0x36, 0x78, 0x37, 0x62, 0x58, 0x56, 0x31, 0x6a, 0x4d, 0x63, 0x44, 0x64, 0x77, 0x30, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6d, 0x4d, 0x43, 0x51, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x42, 0x49, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x49, 0x4d, 0x41, 0x59, 0x42, 0x41, 0x66, 0x38, 0x43, 0x41, 0x51, 0x41, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x49, 0x76, 0x35, 0x4c, 0x33, 0x36, 0x78, 0x62, 0x45, 0x31, 0x62, 0x31, 0x4e, 0x6c, 0x6b, 0x34, 0x59, 0x2b, 0x53, 0x64, 0x69, 0x63, 0x43, 0xa, 0x4f, 0x32, 0x71, 0x61, 0x7a, 0x46, 0x78, 0x70, 0x64, 0x44, 0x44, 0x41, 0x62, 0x37, 0x78, 0x49, 0x37, 0x76, 0x43, 0x36, 0x4e, 0x56, 0x59, 0x54, 0x6a, 0x6c, 0x42, 0x66, 0x49, 0x43, 0x6d, 0x39, 0x70, 0x30, 0x34, 0x78, 0x7a, 0x77, 0x43, 0x50, 0x4c, 0x79, 0x5a, 0x61, 0x6a, 0x66, 0x77, 0x47, 0x34, 0x34, 0x61, 0x36, 0x7a, 0x69, 0x75, 0x69, 0x69, 0x37, 0x58, 0x54, 0x6d, 0x33, 0x79, 0x31, 0xa, 0x76, 0x39, 0x76, 0x52, 0x4f, 0x52, 0x50, 0x78, 0x48, 0x32, 0x4c, 0x61, 0x6d, 0x4c, 0x69, 0x47, 0x73, 0x2f, 0x37, 0x56, 0x56, 0x79, 0x62, 0x59, 0x47, 0x57, 0x33, 0x58, 0x5a, 0x46, 0x61, 0x58, 0x72, 0x49, 0x32, 0x77, 0x79, 0x34, 0x53, 0x64, 0x47, 0x76, 0x6a, 0x5a, 0x68, 0x56, 0x78, 0x61, 0x57, 0x4d, 0x74, 0x51, 0x58, 0x7a, 0x67, 0x56, 0x46, 0x48, 0x50, 0x62, 0x6c, 0x75, 0x7a, 0x71, 0xa, 0x41, 0x65, 0x38, 0x41, 0x30, 0x42, 0x41, 0x6a, 0x58, 0x30, 0x6f, 0x39, 0x4d, 0x77, 0x68, 0x31, 0x73, 0x45, 0x61, 0x66, 0x62, 0x63, 0x77, 0x5a, 0x6a, 0x57, 0x4f, 0x71, 0x33, 0x69, 0x6b, 0x5a, 0x68, 0x50, 0x36, 0x64, 0x58, 0x61, 0x74, 0x74, 0x5a, 0x66, 0x50, 0x72, 0x68, 0x61, 0x35, 0x47, 0x6e, 0x49, 0x36, 0x46, 0x62, 0x4e, 0x73, 0x76, 0x2b, 0x32, 0x53, 0x74, 0x52, 0x4f, 0x35, 0x4f, 0xa, 0x42, 0x79, 0x54, 0x5a, 0x32, 0x59, 0x6f, 0x64, 0x45, 0x65, 0x69, 0x6e, 0x7a, 0x4b, 0x45, 0x61, 0x6f, 0x72, 0x54, 0x4c, 0x72, 0x4b, 0x4f, 0x35, 0x2f, 0x76, 0x57, 0x6b, 0x56, 0x61, 0x4c, 0x71, 0x76, 0x4a, 0x58, 0x30, 0x53, 0x44, 0x73, 0x49, 0x32, 0x69, 0x2b, 0x2f, 0x65, 0x35, 0x37, 0x64, 0x6b, 0x78, 0x61, 0x4b, 0x59, 0x6d, 0x34, 0x67, 0x76, 0x4a, 0x4e, 0x73, 0x79, 0x56, 0x56, 0x35, 0xa, 0x57, 0x70, 0x4e, 0x4d, 0x42, 0x6a, 0x57, 0x56, 0x6c, 0x51, 0x6e, 0x79, 0x7a, 0x35, 0x77, 0x6e, 0x37, 0x71, 0x53, 0x2b, 0x76, 0x72, 0x36, 0x67, 0x31, 0x4a, 0x48, 0x62, 0x6b, 0x66, 0x53, 0x58, 0x6d, 0x39, 0x71, 0x6e, 0x79, 0x4c, 0x75, 0x68, 0x75, 0x70, 0x62, 0x62, 0x53, 0x51, 0x45, 0x6a, 0x77, 0x79, 0x64, 0x59, 0x31, 0x4b, 0x52, 0x46, 0x33, 0x4a, 0x36, 0x42, 0x49, 0x72, 0x6f, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 12:52:13 Finished
RAW provider 2020/12/10 12:52:57 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:52:57 Finished
RAW provider 2020/12/10 12:52:57 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:52:58 Finished
RAW provider 2020/12/10 12:52:58 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:52:58 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 12:52:59 Finished
RAW provider 2020/12/10 12:54:04 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:54:04 Finished
RAW provider 2020/12/10 12:54:04 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:54:04 Finished
RAW provider 2020/12/10 12:54:04 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:54:05 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 12:54:05 Finished
RAW provider 2020/12/10 12:56:30 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:56:30 Finished
RAW provider 2020/12/10 12:56:30 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:56:30 Finished
RAW provider 2020/12/10 12:56:30 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 12:56:31 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 12:57:01 Finished
RAW provider 2020/12/10 13:21:55 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:21:55 Finished
RAW provider 2020/12/10 13:21:55 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:21:56 Finished
RAW provider 2020/12/10 13:21:56 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:21:56 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 13:21:56 Finished
RAW provider 2020/12/10 13:26:26 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:26:26 Finished
RAW provider 2020/12/10 13:26:26 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:26:26 Finished
RAW provider 2020/12/10 13:26:26 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:26:26 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 13:26:30 Finished
RAW provider 2020/12/10 13:27:58 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:27:58 Finished
RAW provider 2020/12/10 13:27:58 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:27:58 Finished
RAW provider 2020/12/10 13:27:58 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:27:58 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 13:27:59 Finished
RAW provider 2020/12/10 13:31:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:31:52 Finished
RAW provider 2020/12/10 13:31:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:31:52 Finished
RAW provider 2020/12/10 13:31:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:31:52 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 13:31:54 Finished
RAW provider 2020/12/10 13:32:11 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:32:11 Finished
RAW provider 2020/12/10 13:32:12 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:32:12 Finished
RAW provider 2020/12/10 13:32:12 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:32:12 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 13:32:12 Finished
RAW provider 2020/12/10 13:41:54 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:41:55 Finished
RAW provider 2020/12/10 13:41:55 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:41:55 Finished
RAW provider 2020/12/10 13:41:55 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:41:55 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 13:41:57 Finished
RAW provider 2020/12/10 13:42:02 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 13:42:02 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 13:42:03 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             },
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=11) "fullVersion": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=1) {
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      }
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc0000cdbf0)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc0000cdc80)(2),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     }
    }
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=3) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01",
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=43) "tanzukubernetescluster.run.tanzu.vmware.com"
    }
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
     (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      },
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      }
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00011aea0)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00011af30)(2)
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1"
  }
 }
}

RAW provider 2020/12/10 13:42:03 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=11) "fullVersion": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=1) {
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      }
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00013e600)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00013e690)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=3) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=43) "tanzukubernetescluster.run.tanzu.vmware.com"
    },
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
     (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      },
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      }
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00013fb90)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00013fb00)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     }
    }
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2020/12/10 13:42:03 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2020/12/10 13:42:04 [ApplyResourceChange][Update] API response:
(*unstructured.Unstructured)(0xc0003a4b48)({
 Object: (map[string]interface {}) (len=5) {
  (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
  (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
  (string) (len=8) "metadata": (map[string]interface {}) (len=9) {
   (string) (len=9) "namespace": (string) (len=5) "app01",
   (string) (len=15) "resourceVersion": (string) (len=6) "914857",
   (string) (len=8) "selfLink": (string) (len=92) "/apis/run.tanzu.vmware.com/v1alpha1/namespaces/app01/tanzukubernetesclusters/tf-tkg-cluster1",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2020-12-09T23:30:19Z",
   (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
   (string) (len=13) "managedFields": ([]interface {}) (len=2 cap=2) {
    (map[string]interface {}) (len=6) {
     (string) (len=4) "time": (string) (len=20) "2020-12-10T19:42:10Z",
     (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=12) "f:finalizers": (map[string]interface {}) (len=1) {
        (string) (len=47) "v:\"tanzukubernetescluster.run.tanzu.vmware.com\"": (map[string]interface {}) {
        }
       }
      },
      (string) (len=6) "f:spec": (map[string]interface {}) (len=3) {
       (string) (len=10) "f:topology": (map[string]interface {}) (len=2) {
        (string) (len=14) "f:controlPlane": (map[string]interface {}) (len=3) {
         (string) (len=14) "f:storageClass": (map[string]interface {}) {
         },
         (string) (len=7) "f:class": (map[string]interface {}) {
         },
         (string) (len=7) "f:count": (map[string]interface {}) {
         }
        },
        (string) (len=9) "f:workers": (map[string]interface {}) (len=3) {
         (string) (len=7) "f:class": (map[string]interface {}) {
         },
         (string) (len=7) "f:count": (map[string]interface {}) {
         },
         (string) (len=14) "f:storageClass": (map[string]interface {}) {
         }
        }
       },
       (string) (len=14) "f:distribution": (map[string]interface {}) (len=2) {
        (string) (len=13) "f:fullVersion": (map[string]interface {}) {
        },
        (string) (len=9) "f:version": (map[string]interface {}) {
        }
       },
       (string) (len=10) "f:settings": (map[string]interface {}) (len=1) {
        (string) (len=9) "f:network": (map[string]interface {}) (len=4) {
         (string) (len=15) "f:serviceDomain": (map[string]interface {}) {
         },
         (string) (len=10) "f:services": (map[string]interface {}) (len=1) {
          (string) (len=12) "f:cidrBlocks": (map[string]interface {}) {
          }
         },
         (string) (len=5) "f:cni": (map[string]interface {}) (len=1) {
          (string) (len=6) "f:name": (map[string]interface {}) {
          }
         },
         (string) (len=6) "f:pods": (map[string]interface {}) (len=1) {
          (string) (len=12) "f:cidrBlocks": (map[string]interface {}) {
          }
         }
        }
       }
      }
     },
     (string) (len=7) "manager": (string) (len=9) "Terraform",
     (string) (len=9) "operation": (string) (len=5) "Apply"
    },
    (map[string]interface {}) (len=6) {
     (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=2) {
      (string) (len=10) "f:metadata": (map[string]interface {}) (len=1) {
       (string) (len=12) "f:finalizers": (map[string]interface {}) (len=2) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=47) "v:\"tanzukubernetescluster.run.tanzu.vmware.com\"": (map[string]interface {}) {
        }
       }
      },
      (string) (len=8) "f:status": (map[string]interface {}) (len=6) {
       (string) (len=18) "f:clusterApiStatus": (map[string]interface {}) (len=3) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=14) "f:apiEndpoints": (map[string]interface {}) {
        },
        (string) (len=7) "f:phase": (map[string]interface {}) {
        }
       },
       (string) (len=12) "f:nodeStatus": (map[string]interface {}) (len=3) {
        (string) (len=48) "f:tf-tkg-cluster1-workers-grjfp-84cbcfff64-dntgg": (map[string]interface {}) {
        },
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=37) "f:tf-tkg-cluster1-control-plane-4kcfw": (map[string]interface {}) {
        }
       },
       (string) (len=7) "f:phase": (map[string]interface {}) {
       },
       (string) (len=10) "f:vmStatus": (map[string]interface {}) (len=3) {
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=37) "f:tf-tkg-cluster1-control-plane-4kcfw": (map[string]interface {}) {
        },
        (string) (len=48) "f:tf-tkg-cluster1-workers-grjfp-84cbcfff64-dntgg": (map[string]interface {}) {
        }
       },
       (string) (len=1) ".": (map[string]interface {}) {
       },
       (string) (len=8) "f:addons": (map[string]interface {}) (len=8) {
        (string) (len=5) "f:psp": (map[string]interface {}) (len=4) {
         (string) (len=1) ".": (map[string]interface {}) {
         },
         (string) (len=6) "f:name": (map[string]interface {}) {
         },
         (string) (len=8) "f:status": (map[string]interface {}) {
         },
         (string) (len=9) "f:version": (map[string]interface {}) {
         }
        },
        (string) (len=1) ".": (map[string]interface {}) {
        },
        (string) (len=9) "f:authsvc": (map[string]interface {}) (len=4) {
         (string) (len=1) ".": (map[string]interface {}) {
         },
         (string) (len=6) "f:name": (map[string]interface {}) {
         },
         (string) (len=8) "f:status": (map[string]interface {}) {
         },
         (string) (len=9) "f:version": (map[string]interface {}) {
         }
        },
        (string) (len=15) "f:cloudprovider": (map[string]interface {}) (len=4) {
         (string) (len=1) ".": (map[string]interface {}) {
         },
         (string) (len=6) "f:name": (map[string]interface {}) {
         },
         (string) (len=8) "f:status": (map[string]interface {}) {
         },
         (string) (len=9) "f:version": (map[string]interface {}) {
         }
        },
        (string) (len=5) "f:cni": (map[string]interface {}) (len=4) {
         (string) (len=8) "f:status": (map[string]interface {}) {
         },
         (string) (len=9) "f:version": (map[string]interface {}) {
         },
         (string) (len=1) ".": (map[string]interface {}) {
         },
         (string) (len=6) "f:name": (map[string]interface {}) {
         }
        },
        (string) (len=5) "f:csi": (map[string]interface {}) (len=4) {
         (string) (len=1) ".": (map[string]interface {}) {
         },
         (string) (len=6) "f:name": (map[string]interface {}) {
         },
         (string) (len=8) "f:status": (map[string]interface {}) {
         },
         (string) (len=9) "f:version": (map[string]interface {}) {
         }
        },
        (string) (len=5) "f:dns": (map[string]interface {}) (len=4) {
         (string) (len=1) ".": (map[string]interface {}) {
         },
         (string) (len=6) "f:name": (map[string]interface {}) {
         },
         (string) (len=8) "f:status": (map[string]interface {}) {
         },
         (string) (len=9) "f:version": (map[string]interface {}) {
         }
        },
        (string) (len=7) "f:proxy": (map[string]interface {}) (len=4) {
         (string) (len=9) "f:version": (map[string]interface {}) {
         },
         (string) (len=1) ".": (map[string]interface {}) {
         },
         (string) (len=6) "f:name": (map[string]interface {}) {
         },
         (string) (len=8) "f:status": (map[string]interface {}) {
         }
        }
       }
      }
     },
     (string) (len=7) "manager": (string) (len=7) "manager",
     (string) (len=9) "operation": (string) (len=6) "Update",
     (string) (len=4) "time": (string) (len=20) "2020-12-09T23:48:00Z"
    }
   },
   (string) (len=3) "uid": (string) (len=36) "d89c257b-dc8f-42de-91df-3158a5318a24",
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=43) "tanzukubernetescluster.run.tanzu.vmware.com"
   },
   (string) (len=10) "generation": (int64) 2
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=3) {
   (string) (len=8) "topology": (map[string]interface {}) (len=2) {
    (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
     (string) (len=5) "count": (int64) 1,
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
    },
    (string) (len=7) "workers": (map[string]interface {}) (len=3) {
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
     (string) (len=5) "count": (int64) 2,
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
    }
   },
   (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
    (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
    (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
   },
   (string) (len=8) "settings": (map[string]interface {}) (len=1) {
    (string) (len=7) "network": (map[string]interface {}) (len=4) {
     (string) (len=3) "cni": (map[string]interface {}) (len=1) {
      (string) (len=4) "name": (string) (len=6) "antrea"
     },
     (string) (len=4) "pods": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=12) "193.0.2.0/16"
      }
     },
     (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
     (string) (len=8) "services": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=15) "195.51.100.0/12"
      }
     }
    }
   }
  },
  (string) (len=6) "status": (map[string]interface {}) (len=5) {
   (string) (len=6) "addons": (map[string]interface {}) (len=7) {
    (string) (len=7) "authsvc": (map[string]interface {}) (len=3) {
     (string) (len=7) "version": (string) (len=15) "0.1-66-g8b8f07f",
     (string) (len=4) "name": (string) (len=7) "authsvc",
     (string) (len=6) "status": (string) (len=7) "applied"
    },
    (string) (len=13) "cloudprovider": (map[string]interface {}) (len=3) {
     (string) (len=4) "name": (string) (len=20) "vmware-guest-cluster",
     (string) (len=6) "status": (string) (len=7) "applied",
     (string) (len=7) "version": (string) (len=15) "0.1-79-g9a3e92a"
    },
    (string) (len=3) "cni": (map[string]interface {}) (len=3) {
     (string) (len=7) "version": (string) (len=15) "v0.9.2_vmware.1",
     (string) (len=4) "name": (string) (len=6) "antrea",
     (string) (len=6) "status": (string) (len=7) "applied"
    },
    (string) (len=3) "csi": (map[string]interface {}) (len=3) {
     (string) (len=4) "name": (string) (len=5) "pvcsi",
     (string) (len=6) "status": (string) (len=7) "applied",
     (string) (len=7) "version": (string) (len=30) "v0.0.1.alpha+vmware.79-7ecdcb1"
    },
    (string) (len=3) "dns": (map[string]interface {}) (len=3) {
     (string) (len=4) "name": (string) (len=7) "CoreDNS",
     (string) (len=6) "status": (string) (len=7) "applied",
     (string) (len=7) "version": (string) (len=15) "v1.6.7_vmware.1"
    },
    (string) (len=5) "proxy": (map[string]interface {}) (len=3) {
     (string) (len=4) "name": (string) (len=10) "kube-proxy",
     (string) (len=6) "status": (string) (len=7) "applied",
     (string) (len=7) "version": (string) (len=15) "1.18.5+vmware.1"
    },
    (string) (len=3) "psp": (map[string]interface {}) (len=3) {
     (string) (len=4) "name": (string) (len=10) "defaultpsp",
     (string) (len=6) "status": (string) (len=7) "applied",
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    }
   },
   (string) (len=16) "clusterApiStatus": (map[string]interface {}) (len=2) {
    (string) (len=12) "apiEndpoints": ([]interface {}) (len=1 cap=1) {
     (map[string]interface {}) (len=2) {
      (string) (len=4) "host": (string) (len=12) "10.0.101.131",
      (string) (len=4) "port": (int64) 6443
     }
    },
    (string) (len=5) "phase": (string) (len=11) "Provisioned"
   },
   (string) (len=10) "nodeStatus": (map[string]interface {}) (len=2) {
    (string) (len=46) "tf-tkg-cluster1-workers-grjfp-84cbcfff64-dntgg": (string) (len=5) "ready",
    (string) (len=35) "tf-tkg-cluster1-control-plane-4kcfw": (string) (len=5) "ready"
   },
   (string) (len=5) "phase": (string) (len=7) "running",
   (string) (len=8) "vmStatus": (map[string]interface {}) (len=2) {
    (string) (len=35) "tf-tkg-cluster1-control-plane-4kcfw": (string) (len=5) "ready",
    (string) (len=46) "tf-tkg-cluster1-workers-grjfp-84cbcfff64-dntgg": (string) (len=5) "ready"
   }
  }
 }
})

RAW provider 2020/12/10 13:42:04 [ApplyResourceChange][Update] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=9) "namespace": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=10) "finalizers": (cty.Type) {
        typeImpl: (cty.typeTuple) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElemTypes: ([]cty.Type) (len=1 cap=1) {
          (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=8) "topology": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=12) "controlPlane": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=3) {
             (string) (len=5) "count": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 78
              }
             },
             (string) (len=12) "storageClass": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=5) "class": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=7) "workers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=3) {
             (string) (len=5) "class": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=5) "count": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 78
              }
             },
             (string) (len=12) "storageClass": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=12) "distribution": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=7) "version": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=11) "fullVersion": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=8) "settings": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "network": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=4) {
             (string) (len=13) "serviceDomain": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=8) "services": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=10) "cidrBlocks": (cty.Type) {
                 typeImpl: (cty.typeTuple) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  ElemTypes: ([]cty.Type) (len=1 cap=1) {
                   (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             },
             (string) (len=3) "cni": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=4) "name": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=4) "pods": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=10) "cidrBlocks": (cty.Type) {
                 typeImpl: (cty.typeTuple) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  ElemTypes: ([]cty.Type) (len=1 cap=1) {
                   (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
  (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
  (string) (len=8) "metadata": (map[string]interface {}) (len=3) {
   (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
    (string) (len=43) "tanzukubernetescluster.run.tanzu.vmware.com"
   },
   (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
   (string) (len=9) "namespace": (string) (len=5) "app01"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=3) {
   (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
    (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
    (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
   },
   (string) (len=8) "settings": (map[string]interface {}) (len=1) {
    (string) (len=7) "network": (map[string]interface {}) (len=4) {
     (string) (len=4) "pods": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=12) "193.0.2.0/16"
      }
     },
     (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
     (string) (len=8) "services": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=15) "195.51.100.0/12"
      }
     },
     (string) (len=3) "cni": (map[string]interface {}) (len=1) {
      (string) (len=4) "name": (string) (len=6) "antrea"
     }
    }
   },
   (string) (len=8) "topology": (map[string]interface {}) (len=2) {
    (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
     (string) (len=5) "count": (*big.Float)(0xc000517da0)(1),
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall"
    },
    (string) (len=7) "workers": (map[string]interface {}) (len=3) {
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
     (string) (len=5) "count": (*big.Float)(0xc000517f80)(2),
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
    }
   }
  }
 }
}
RAW provider 2020/12/10 13:42:04 [ApplyResourceChange][Update] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=11) "fullVersion": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc0000cdbf0)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc0000cdc80)(2),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     }
    },
    (string) (len=12) "distribution": (map[string]interface {}) (len=1) {
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      }
     }
    }
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=3) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01",
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=43) "tanzukubernetescluster.run.tanzu.vmware.com"
    }
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
     (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      }
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc000517da0)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc000517f80)(2),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}
RAW provider 2020/12/10 13:42:04 Finished
RAW provider 2020/12/10 15:14:15 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:14:16 Finished
RAW provider 2020/12/10 15:14:16 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:14:16 Finished
RAW provider 2020/12/10 15:14:16 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:14:16 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 15:14:16 Finished
RAW provider 2020/12/10 15:18:31 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:18:31 Finished
RAW provider 2020/12/10 15:18:31 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:18:31 Finished
RAW provider 2020/12/10 15:18:31 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:18:31 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 15:18:32 Finished
RAW provider 2020/12/10 15:18:38 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:18:38 Finished
RAW provider 2020/12/10 15:18:38 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:18:38 Finished
RAW provider 2020/12/10 15:18:39 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:18:39 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 15:19:20 Finished
RAW provider 2020/12/10 15:19:29 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:19:29 Finished
RAW provider 2020/12/10 15:19:29 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:19:29 Finished
RAW provider 2020/12/10 15:19:30 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:19:30 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 15:19:34 Finished
RAW provider 2020/12/10 15:19:37 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:19:38 Finished
RAW provider 2020/12/10 15:19:38 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:19:38 Finished
RAW provider 2020/12/10 15:19:38 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:19:38 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 15:20:08 Finished
RAW provider 2020/12/10 15:25:55 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:25:55 Finished
RAW provider 2020/12/10 15:25:55 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:25:55 Finished
RAW provider 2020/12/10 15:25:56 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:25:56 Finished
RAW provider 2020/12/10 15:25:59 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 15:25:59 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 15:25:59 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2020/12/10 15:25:59 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=10) "finalizers": (cty.Type) {
           typeImpl: (cty.typeTuple) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            ElemTypes: ([]cty.Type) (len=1 cap=1) {
             (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=11) "fullVersion": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
     (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      },
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      }
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00043e150)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00043e1e0)(2),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=3) {
    (string) (len=10) "finalizers": ([]interface {}) (len=1 cap=1) {
     (string) (len=43) "tanzukubernetescluster.run.tanzu.vmware.com"
    },
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=1) {
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      },
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      }
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc0004111d0)(2),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc000411140)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster"
  }
 }
}

RAW provider 2020/12/10 15:25:59 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2020/12/10 15:26:09 Finished
RAW provider 2020/12/10 16:19:41 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:19:41 Finished
RAW provider 2020/12/10 16:19:41 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:19:41 Finished
RAW provider 2020/12/10 16:19:41 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:19:41 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 16:19:41 Finished
RAW provider 2020/12/10 16:19:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:19:52 Finished
RAW provider 2020/12/10 16:19:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:19:52 Finished
RAW provider 2020/12/10 16:19:52 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:19:52 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 16:20:03 Finished
RAW provider 2020/12/10 16:20:06 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:20:06 Finished
RAW provider 2020/12/10 16:20:06 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:20:06 Finished
RAW provider 2020/12/10 16:20:06 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:20:06 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 16:20:14 Finished
RAW provider 2020/12/10 16:20:26 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:20:26 Finished
RAW provider 2020/12/10 16:20:27 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:20:27 Finished
RAW provider 2020/12/10 16:20:27 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:20:27 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 16:20:27 Finished
RAW provider 2020/12/10 16:20:30 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:20:30 Finished
RAW provider 2020/12/10 16:20:30 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:20:30 Finished
RAW provider 2020/12/10 16:20:31 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:20:31 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 16:20:52 Finished
RAW provider 2020/12/10 16:20:55 Starting up with command line: []string{".terraform/providers/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/linux_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5"}
RAW provider 2020/12/10 16:20:55 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://10.0.101.129:6443", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:true, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8(nil), NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/12/10 16:21:05 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=11) "fullVersion": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=1) {
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      }
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00013d320)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00013d410)(1)
     }
    }
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
     (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      }
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc000166420)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc000166390)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=9) "namespace": (string) (len=5) "app01",
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2020/12/10 16:21:05 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2020/12/10 16:21:05 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2020/12/10 16:21:25 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc0003904a0)({
 Object: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
  (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
  (string) (len=8) "metadata": (map[string]interface {}) (len=8) {
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=7) "manager": (string) (len=9) "Terraform",
     (string) (len=9) "operation": (string) (len=5) "Apply",
     (string) (len=4) "time": (string) (len=20) "2020-12-10T22:21:12Z",
     (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1",
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=1) {
      (string) (len=6) "f:spec": (map[string]interface {}) (len=3) {
       (string) (len=14) "f:distribution": (map[string]interface {}) (len=2) {
        (string) (len=13) "f:fullVersion": (map[string]interface {}) {
        },
        (string) (len=9) "f:version": (map[string]interface {}) {
        }
       },
       (string) (len=10) "f:settings": (map[string]interface {}) (len=1) {
        (string) (len=9) "f:network": (map[string]interface {}) (len=4) {
         (string) (len=10) "f:services": (map[string]interface {}) (len=1) {
          (string) (len=12) "f:cidrBlocks": (map[string]interface {}) {
          }
         },
         (string) (len=5) "f:cni": (map[string]interface {}) (len=1) {
          (string) (len=6) "f:name": (map[string]interface {}) {
          }
         },
         (string) (len=6) "f:pods": (map[string]interface {}) (len=1) {
          (string) (len=12) "f:cidrBlocks": (map[string]interface {}) {
          }
         },
         (string) (len=15) "f:serviceDomain": (map[string]interface {}) {
         }
        }
       },
       (string) (len=10) "f:topology": (map[string]interface {}) (len=2) {
        (string) (len=14) "f:controlPlane": (map[string]interface {}) (len=3) {
         (string) (len=7) "f:count": (map[string]interface {}) {
         },
         (string) (len=14) "f:storageClass": (map[string]interface {}) {
         },
         (string) (len=7) "f:class": (map[string]interface {}) {
         }
        },
        (string) (len=9) "f:workers": (map[string]interface {}) (len=3) {
         (string) (len=7) "f:class": (map[string]interface {}) {
         },
         (string) (len=7) "f:count": (map[string]interface {}) {
         },
         (string) (len=14) "f:storageClass": (map[string]interface {}) {
         }
        }
       }
      }
     }
    }
   },
   (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
   (string) (len=9) "namespace": (string) (len=5) "app01",
   (string) (len=15) "resourceVersion": (string) (len=7) "1011168",
   (string) (len=8) "selfLink": (string) (len=92) "/apis/run.tanzu.vmware.com/v1alpha1/namespaces/app01/tanzukubernetesclusters/tf-tkg-cluster1",
   (string) (len=3) "uid": (string) (len=36) "b384edf7-6798-4bc4-a988-a6a1e3754c36",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2020-12-10T22:21:12Z",
   (string) (len=10) "generation": (int64) 1
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=3) {
   (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
    (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
    (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
   },
   (string) (len=8) "settings": (map[string]interface {}) (len=1) {
    (string) (len=7) "network": (map[string]interface {}) (len=4) {
     (string) (len=3) "cni": (map[string]interface {}) (len=1) {
      (string) (len=4) "name": (string) (len=6) "antrea"
     },
     (string) (len=4) "pods": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=12) "193.0.2.0/16"
      }
     },
     (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
     (string) (len=8) "services": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=15) "195.51.100.0/12"
      }
     }
    }
   },
   (string) (len=8) "topology": (map[string]interface {}) (len=2) {
    (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
     (string) (len=5) "count": (int64) 1
    },
    (string) (len=7) "workers": (map[string]interface {}) (len=3) {
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
     (string) (len=5) "count": (int64) 1,
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
    }
   }
  }
 }
})

RAW provider 2020/12/10 16:21:25 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=9) "namespace": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "spec": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=3) {
       (string) (len=12) "distribution": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=11) "fullVersion": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=7) "version": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=8) "settings": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=7) "network": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=4) {
             (string) (len=4) "pods": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=10) "cidrBlocks": (cty.Type) {
                 typeImpl: (cty.typeTuple) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  ElemTypes: ([]cty.Type) (len=1 cap=1) {
                   (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             },
             (string) (len=13) "serviceDomain": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=8) "services": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=10) "cidrBlocks": (cty.Type) {
                 typeImpl: (cty.typeTuple) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  ElemTypes: ([]cty.Type) (len=1 cap=1) {
                   (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                }
               }
              }
             },
             (string) (len=3) "cni": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=1) {
                (string) (len=4) "name": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=8) "topology": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=12) "controlPlane": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=3) {
             (string) (len=5) "class": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=5) "count": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 78
              }
             },
             (string) (len=12) "storageClass": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=7) "workers": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=3) {
             (string) (len=5) "class": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=5) "count": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 78
              }
             },
             (string) (len=12) "storageClass": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
   (string) (len=9) "namespace": (string) (len=5) "app01"
  },
  (string) (len=4) "spec": (map[string]interface {}) (len=3) {
   (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
    (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
    (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
   },
   (string) (len=8) "settings": (map[string]interface {}) (len=1) {
    (string) (len=7) "network": (map[string]interface {}) (len=4) {
     (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
     (string) (len=8) "services": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=15) "195.51.100.0/12"
      }
     },
     (string) (len=3) "cni": (map[string]interface {}) (len=1) {
      (string) (len=4) "name": (string) (len=6) "antrea"
     },
     (string) (len=4) "pods": (map[string]interface {}) (len=1) {
      (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
       (string) (len=12) "193.0.2.0/16"
      }
     }
    }
   },
   (string) (len=8) "topology": (map[string]interface {}) (len=2) {
    (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
     (string) (len=5) "count": (*big.Float)(0xc00024bb60)(1),
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
    },
    (string) (len=7) "workers": (map[string]interface {}) (len=3) {
     (string) (len=5) "count": (*big.Float)(0xc00024bce0)(1),
     (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
     (string) (len=5) "class": (string) (len=18) "best-effort-xsmall"
    }
   }
  },
  (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1"
 }
}

RAW provider 2020/12/10 16:21:25 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=4) "spec": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=3) {
          (string) (len=8) "topology": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=12) "controlPlane": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             },
             (string) (len=7) "workers": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=3) {
                (string) (len=5) "class": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=5) "count": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 78
                 }
                },
                (string) (len=12) "storageClass": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                }
               }
              }
             }
            }
           }
          },
          (string) (len=12) "distribution": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=2) {
             (string) (len=11) "fullVersion": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             },
             (string) (len=7) "version": (cty.Type) {
              typeImpl: (cty.primitiveType) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               Kind: (cty.primitiveTypeKind) 83
              }
             }
            }
           }
          },
          (string) (len=8) "settings": (cty.Type) {
           typeImpl: (cty.typeObject) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            AttrTypes: (map[string]cty.Type) (len=1) {
             (string) (len=7) "network": (cty.Type) {
              typeImpl: (cty.typeObject) {
               typeImplSigil: (cty.typeImplSigil) {
               },
               AttrTypes: (map[string]cty.Type) (len=4) {
                (string) (len=3) "cni": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=4) "name": (cty.Type) {
                    typeImpl: (cty.primitiveType) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     Kind: (cty.primitiveTypeKind) 83
                    }
                   }
                  }
                 }
                },
                (string) (len=4) "pods": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                },
                (string) (len=13) "serviceDomain": (cty.Type) {
                 typeImpl: (cty.primitiveType) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  Kind: (cty.primitiveTypeKind) 83
                 }
                },
                (string) (len=8) "services": (cty.Type) {
                 typeImpl: (cty.typeObject) {
                  typeImplSigil: (cty.typeImplSigil) {
                  },
                  AttrTypes: (map[string]cty.Type) (len=1) {
                   (string) (len=10) "cidrBlocks": (cty.Type) {
                    typeImpl: (cty.typeTuple) {
                     typeImplSigil: (cty.typeImplSigil) {
                     },
                     ElemTypes: ([]cty.Type) (len=1 cap=1) {
                      (cty.Type) {
                       typeImpl: (cty.primitiveType) {
                        typeImplSigil: (cty.typeImplSigil) {
                        },
                        Kind: (cty.primitiveTypeKind) 83
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=9) "namespace": (string) (len=5) "app01",
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      },
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      }
     }
    },
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00013d320)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00013d410)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     }
    },
    (string) (len=12) "distribution": (map[string]interface {}) (len=1) {
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1"
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "kind": (string) (len=22) "TanzuKubernetesCluster",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=15) "tf-tkg-cluster1",
    (string) (len=9) "namespace": (string) (len=5) "app01"
   },
   (string) (len=4) "spec": (map[string]interface {}) (len=3) {
    (string) (len=8) "topology": (map[string]interface {}) (len=2) {
     (string) (len=12) "controlPlane": (map[string]interface {}) (len=3) {
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes",
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00024bb60)(1)
     },
     (string) (len=7) "workers": (map[string]interface {}) (len=3) {
      (string) (len=5) "class": (string) (len=18) "best-effort-xsmall",
      (string) (len=5) "count": (*big.Float)(0xc00024bce0)(1),
      (string) (len=12) "storageClass": (string) (len=10) "kubernetes"
     }
    },
    (string) (len=12) "distribution": (map[string]interface {}) (len=2) {
     (string) (len=11) "fullVersion": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d",
     (string) (len=7) "version": (string) (len=30) "v1.18.5+vmware.1-tkg.1.c40d30d"
    },
    (string) (len=8) "settings": (map[string]interface {}) (len=1) {
     (string) (len=7) "network": (map[string]interface {}) (len=4) {
      (string) (len=3) "cni": (map[string]interface {}) (len=1) {
       (string) (len=4) "name": (string) (len=6) "antrea"
      },
      (string) (len=4) "pods": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=12) "193.0.2.0/16"
       }
      },
      (string) (len=13) "serviceDomain": (string) (len=20) "managedcluster.local",
      (string) (len=8) "services": (map[string]interface {}) (len=1) {
       (string) (len=10) "cidrBlocks": ([]interface {}) (len=1 cap=1) {
        (string) (len=15) "195.51.100.0/12"
       }
      }
     }
    }
   },
   (string) (len=10) "apiVersion": (string) (len=29) "run.tanzu.vmware.com/v1alpha1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}
RAW provider 2020/12/10 16:21:25 Finished
